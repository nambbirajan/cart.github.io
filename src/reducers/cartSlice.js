// src/redux/cartSlice.js

import { createSlice } from '@reduxjs/toolkit';

// Define the initial state of the cart
const initialState = {
  cartItems: [],       // Array to hold cart items
  totalAmount: 0,      // Total price of items in the cart
  totalQuantity: 0,    // Total number of items in the cart
};

// Create the cart slice
const cartSlice = createSlice({
  name: 'cart',         // Name of the slice
  initialState,         // Initial state
  reducers: {           // Reducer functions to handle actions
    // Action to add an item to the cart
    addToCart(state, action) {
      const item = action.payload;
      const existingItem = state.cartItems.find((i) => i.id === item.id);
      state.totalQuantity += 1;
      if (!existingItem) {
        // If the item doesn't exist in the cart, add it with quantity 1
        state.cartItems.push({ ...item, quantity: 1 });
      } else {
        // If the item exists, increment its quantity
        existingItem.quantity += 1;
      }
      // Update the total amount
      state.totalAmount += item.price;
    },
    // Action to remove an item from the cart
    removeFromCart(state, action) {
      const id = action.payload;
      const existingItem = state.cartItems.find((i) => i.id === id);
      if (existingItem) {
        state.totalQuantity -= existingItem.quantity;
        state.totalAmount -= existingItem.price * existingItem.quantity;
        // Remove the item from the cart
        state.cartItems = state.cartItems.filter((i) => i.id !== id);
      }
    },
    // Action to decrease the quantity of an item in the cart
    decreaseQuantity(state, action) {
      const id = action.payload;
      const existingItem = state.cartItems.find((i) => i.id === id);
      if (existingItem) {
        if (existingItem.quantity === 1) {
          // If quantity is 1, remove the item from the cart
          state.cartItems = state.cartItems.filter((i) => i.id !== id);
        } else {
          //  decrease the quantity by 1
          existingItem.quantity -= 1;
        }
        // Update the total quantity and amount
        state.totalQuantity -= 1;
        state.totalAmount -= existingItem.price;
      }
    },
    // Action to clear the entire cart
    clearCart(state) {
      state.cartItems = [];
      state.totalAmount = 0;
      state.totalQuantity = 0;
    },
  },
});

// Export the actions generated by createSlice
export const { addToCart, removeFromCart, decreaseQuantity, clearCart } = cartSlice.actions;

// Export the reducer to be included in the store
export default cartSlice.reducer;
